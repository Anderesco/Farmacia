AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-cli

  Sample SAM Template for sam-cli
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs14.x
    CodeUri: src/

Parameters:
  UserPoolID:
    Type: String
    Description: "User pool ID del cognito"
    Default: "us-east-1_MtBddKTvm"
  ClientPoolID:
    Type: String
    Description: "Client pool ID del cognito"
    Default: "4s34hq0821fb08c30o4fk5gfp5"

Resources:
  PruebaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: 'Farmacia-PruebaFunction'
      Handler: handler/prueba.lambdaHandler
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /prueba
            Method: get
            RestApiId: !Ref AutorizacionFunction
            Auth :
              Authorizer : "MyCognitoAuth"

  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: 'Farmacia-LoginFunction'
      Handler: handler/cognito/login.token
      Environment:
        Variables:
          USER_POOL_ID : !Ref UserPoolID
          CLIENT_POOL : !Ref ClientPoolID
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /token
            Method: post
            RestApiId: !Ref AutorizacionFunction
      Policies:
        - AmazonCognitoReadOnly
        - AmazonCognitoPowerUser

  CambiarContraseniaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: 'Farmacia-CambiarContraseniaFunction'
      Handler: handler/cognito/contrasenia.cambiarContraseniaPrimeraVez
      Environment:
        Variables:
          USER_POOL_ID : !Ref UserPoolID
          CLIENT_POOL : !Ref ClientPoolID
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /password/update
            Method: put
            RestApiId: !Ref AutorizacionFunction
      Policies:
        - AmazonCognitoReadOnly
        - AmazonCognitoPowerUser

  #Autorizador creado en API Gateway para cognito
  AutorizacionFunction:
    Type: AWS::Serverless::Api
    Properties:
      Name: AutorizacionCognito
      StageName: dev
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'"
              Access-Control-Allow-Headers: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString ,"code": "0001" }'
        EXPIRED_TOKEN:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'"
              Access-Control-Allow-Headers: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString ,"code": "0002" }'
        INTEGRATION_TIMEOUT:
          StatusCode: 504
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'"
              Access-Control-Allow-Headers: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString ,"code": "0003" }'             
      Cors:
        AllowMethods: "'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Origin, X-Requested-With, Content-Type, Accept, Authorization'"
        AllowOrigin: "'*'"      
      TracingEnabled: true
      Auth :
        Authorizers: 
          MyCognitoAuth :
            UserPoolArn : "arn:aws:cognito-idp:us-east-1:851006405034:userpool/us-east-1_MtBddKTvm"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  #HelloWorldApi:
    #Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    #Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  #HelloWorldFunction:
    #Description: "Hello World Lambda Function ARN"
    #Value: !GetAtt HelloWorldFunction.Arn
  #HelloWorldFunctionIamRole:
    #Description: "Implicit IAM Role created for Hello World function"
    #Value: !GetAtt HelloWorldFunctionRole.Arn
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub
      - 'https://${AutorizacionFunction}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
      - Stage: dev
  ApiId:
    Description: 'Api ID'
    Value: !Sub '${AutorizacionFunction}'
